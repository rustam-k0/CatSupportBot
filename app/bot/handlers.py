# app/bot/handlers.py

import logging
from telegram import Update
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, filters,
    ConversationHandler, CallbackQueryHandler
)
from app.services.vision_ocr import recognize_text
from app.services.data_parser import parse_date, parse_amount, parse_bank, parse_author, parse_procedure
from app.services.sheets_client import write_transaction
from app.bot.keyboards import get_transaction_type_keyboard, get_confirmation_keyboard, get_editing_keyboard

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(AWAITING_TYPE, AWAITING_PET, AWAITING_PHOTO, CONFIRMATION, EDITING, AWAITING_EDIT_VALUE, AWAITING_COMMENT) = range(7)

def build_summary_text(data: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç-—Å–≤–æ–¥–∫—É, —Ç–µ–ø–µ—Ä—å —Å –ø–æ–ª–µ–º '–ü—Ä–æ—Ü–µ–¥—É—Ä–∞' –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤."""
    ud = data
    type_str = '‚úÖ –ü—Ä–∏—Ö–æ–¥ (–¥–æ–Ω–∞—Ç)' if ud.get('type') == 'income' else '‚ùå –†–∞—Å—Ö–æ–¥ (–ø–æ–∫—É–ø–∫–∞)'

    summary_parts = [
        f"–¢–∏–ø: *{type_str}*",
        f"–ü–∏—Ç–æ–º–µ—Ü/–ü—Ä–æ–µ–∫—Ç: *{ud.get('pet_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')}*",
        f"–î–∞—Ç–∞: *{ud.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}*",
        f"–°—É–º–º–∞: *{ud.get('amount', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}*",
    ]
    
    if ud.get('type') == 'income':
        summary_parts.extend([
            f"–ë–∞–Ω–∫: *{ud.get('bank', '–Ω–µ —É–∫–∞–∑–∞–Ω')}*",
            f"–ê–≤—Ç–æ—Ä (–¥–æ–Ω–∞—Ç–µ—Ä): *{ud.get('author', '–Ω–µ —É–∫–∞–∑–∞–Ω')}*"
        ])
    else: # expense
        summary_parts.extend([
            f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: *{ud.get('procedure', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞')}*",
            f"–ê–≤—Ç–æ—Ä (–∫–ª–∏–Ω–∏–∫–∞/–º–∞–≥–∞–∑–∏–Ω): *{ud.get('author', '–Ω–µ —É–∫–∞–∑–∞–Ω')}*"
        ])
    
    if ud.get('comment'):
        summary_parts.append(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{ud.get('comment')}*")

    return "\n".join(summary_parts)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    context.user_data.clear()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —É—á–µ—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=get_transaction_type_keyboard()
    )
    return AWAITING_TYPE

async def handle_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–∏—Ç–æ–º—Ü–∞."""
    query = update.callback_query
    await query.answer()
    context.user_data['type'] = query.data
    await query.edit_message_text(text=f"–¢–∏–ø –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞/–ø—Ä–æ–µ–∫—Ç–∞:")
    return AWAITING_PET

async def handle_pet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ."""
    pet_name = update.message.text.strip().capitalize()
    context.user_data['pet_name'] = pet_name
    await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ–º —Å '{pet_name}'. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.")
    return AWAITING_PHOTO

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª, —Ä–∞—Å–ø–æ–∑–Ω–∞—é... üßê –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    try:
        photo_file = await update.message.photo[-1].get_file()
        image_bytes = await photo_file.download_as_bytearray()
        
        recognized_text = await recognize_text(bytes(image_bytes))
        if not recognized_text or recognized_text.startswith("–û—à–∏–±–∫–∞"):
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü—Ä–∏—á–∏–Ω–∞: {recognized_text}.")
            return AWAITING_PHOTO

        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {recognized_text[:300]}...")
        
        transaction_type = context.user_data.get('type')
        context.user_data['date'] = parse_date(recognized_text)
        context.user_data['amount'] = parse_amount(recognized_text, transaction_type)
        context.user_data['author'] = parse_author(recognized_text, transaction_type)
        
        if transaction_type == 'income':
            context.user_data['bank'] = parse_bank(recognized_text)
        else: # expense
            context.user_data['procedure'] = parse_procedure(recognized_text)

        summary_text = build_summary_text(context.user_data)
        await update.message.reply_text(
            f"–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å:\n\n{summary_text}",
            reply_markup=get_confirmation_keyboard(),
            parse_mode='Markdown'
        )
        return CONFIRMATION
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_photo: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return AWAITING_PHOTO

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–°–æ—Ö—Ä–∞–Ω–∏—Ç—å, –ò—Å–ø—Ä–∞–≤–∏—Ç—å, –û—Ç–º–µ–Ω–∞)."""
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == 'save':
        await query.edit_message_text("–°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ... ‚è≥")
        link = write_transaction(context.user_data)
        if link:
            await query.edit_message_text(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É]({link})", parse_mode='Markdown')
        else:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        context.user_data.clear()
        return ConversationHandler.END
    
    elif action == 'edit':
        summary_text = build_summary_text(context.user_data)
        await query.edit_message_text(
            f"–ö–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?\n\n{summary_text}",
            reply_markup=get_editing_keyboard(context.user_data),
            parse_mode='Markdown'
        )
        return EDITING

    elif action == 'add_comment':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        return AWAITING_COMMENT

    elif action == 'cancel':
        context.user_data.clear()
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
    
    return CONFIRMATION

async def handle_editing_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'edit_back':
        summary_text = build_summary_text(context.user_data)
        await query.edit_message_text(
            f"–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å:\n\n{summary_text}",
            reply_markup=get_confirmation_keyboard(),
            parse_mode='Markdown'
        )
        return CONFIRMATION

    field_to_edit = query.data.replace('edit_', '')
    context.user_data['field_to_edit'] = field_to_edit
    
    field_labels = {
        'pet_name': '–ø–∏—Ç–æ–º—Ü–∞', 'date': '–¥–∞—Ç—É (–¥–¥.–º–º.–≥–≥–≥–≥)', 'amount': '—Å—É–º–º—É (—á–∏—Å–ª–æ)', 
        'bank': '–±–∞–Ω–∫', 'author': '–∞–≤—Ç–æ—Ä–∞', 'procedure': '–ø—Ä–æ—Ü–µ–¥—É—Ä—É'
    }
    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_labels.get(field_to_edit, field_to_edit)}':")
    return AWAITING_EDIT_VALUE

async def handle_edit_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ —ç—Ç–∞–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    field = context.user_data.pop('field_to_edit', None)
    if field:
        new_value = update.message.text.strip()
        context.user_data[field] = new_value

    summary_text = build_summary_text(context.user_data)
    await update.message.reply_text(
        f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â–µ —Ä–∞–∑:\n\n{summary_text}",
        reply_markup=get_confirmation_keyboard(),
        parse_mode='Markdown'
    )
    return CONFIRMATION

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ —ç—Ç–∞–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    context.user_data['comment'] = update.message.text.strip()
    summary_text = build_summary_text(context.user_data)
    await update.message.reply_text(
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n{summary_text}",
        reply_markup=get_confirmation_keyboard(),
        parse_mode='Markdown'
    )
    return CONFIRMATION

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    context.user_data.clear()
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
help_handler = CommandHandler('help', lambda u, c: u.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –≤—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞."))

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        AWAITING_TYPE: [CallbackQueryHandler(handle_type, pattern='^(income|expense)$')],
        AWAITING_PET: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_pet)],
        AWAITING_PHOTO: [MessageHandler(filters.PHOTO, handle_photo)],
        CONFIRMATION: [CallbackQueryHandler(handle_confirmation, pattern='^(save|edit|add_comment|cancel)$')],
        EDITING: [CallbackQueryHandler(handle_editing_choice)],
        AWAITING_EDIT_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_value)],
        AWAITING_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment)],
    },
    fallbacks=[CommandHandler('cancel', cancel)]
)