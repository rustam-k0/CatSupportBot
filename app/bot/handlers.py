import logging
import re
from telegram import Update
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, filters,
    ConversationHandler, CallbackQueryHandler
)

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–º–ø–æ—Ä—Ç—ã
from app.bot.keyboards import (
    get_transaction_type_keyboard, get_confirmation_keyboard,
    get_editing_keyboard, get_restart_keyboard
)
from app.services.vision_ocr import recognize_text
from app.services.data_parser import parse_date, parse_amount, parse_bank, parse_author, parse_procedure
from app.services.sheets_client import write_transaction
from config.settings import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
(
    STATE_AWAITING_TYPE,
    STATE_AWAITING_PET,
    STATE_AWAITING_PHOTO,
    STATE_CONFIRMATION,
    STATE_EDITING_CHOICE,
    STATE_AWAITING_EDIT_VALUE,
    STATE_AWAITING_COMMENT,
    STATE_DONE  # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
) = range(8)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def build_summary_text(data: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    ud = data
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏
    type_str = 'üìà *–î–æ—Ö–æ–¥*' if ud.get('type') == 'income' else 'üõçÔ∏è *–†–∞—Å—Ö–æ–¥*'

    # –°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    summary_parts = [
        f"–¢–∏–ø: {type_str}",
        f"–ü–æ–¥–æ–ø–µ—á–Ω—ã–π: *{ud.get('pet_name', '...')}*",
        f"–î–∞—Ç–∞: *{ud.get('date', '...')}*",
        f"–°—É–º–º–∞: *{ud.get('amount', '...')} —Ä—É–±*.",
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if ud.get('type') == 'income':
        summary_parts.extend([
            f"–ë–∞–Ω–∫: *{ud.get('bank', '...')}*",
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: *{ud.get('author', '...')}*"
        ])
    else:  # expense
        summary_parts.extend([
            f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: *{ud.get('procedure', '...')}*",
            f"–ü—Ä–æ–¥–∞–≤–µ—Ü: *{ud.get('author', '...')}*"
        ])

    if ud.get('comment'):
        summary_parts.append(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: _{ud.get('comment')}_")

    return "\n".join(summary_parts)


async def _show_summary(update: Update, context: ContextTypes.DEFAULT_TYPE, text_prefix: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    summary_text = build_summary_text(context.user_data)
    full_text = f"{text_prefix}\n\n{summary_text}"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    query = update.callback_query
    if query:
        await query.edit_message_text(
            full_text, reply_markup=get_confirmation_keyboard(), parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            full_text, reply_markup=get_confirmation_keyboard(), parse_mode='Markdown'
        )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏.
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start, —Ç–∞–∫ –∏ –¥–ª—è callback-–∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
    """
    context.user_data.clear()
    query = update.callback_query
    user_name = update.effective_user.first_name

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üêæ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ —É—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n\n"
        "**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: *–î–æ—Ö–æ–¥* –∏–ª–∏ *–†–∞—Å—Ö–æ–¥*.\n"
        "2. –£–∫–∞–∂–∏—Ç–µ, –∫ –∫–∞–∫–æ–º—É —Ö–≤–æ—Å—Ç–∏–∫—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–ø–∏—Å—å üêà.\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.\n\n"
        f"–Ø –≤—Å—ë —Ä–∞—Å–ø–æ–∑–Ω–∞—é, –∞ –≤—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç–µ. –ì–æ—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ [–æ–±—â—É—é —Ç–∞–±–ª–∏—Ü—É]({settings.GOOGLE_SHEETS_LINK}).\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å?"
    )
    keyboard = get_transaction_type_keyboard()

    if query:
        await query.answer()
        await query.edit_message_text(
            welcome_text,
            reply_markup=keyboard,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    else:
        await update.message.reply_text(
            welcome_text,
            reply_markup=keyboard,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    return STATE_AWAITING_TYPE


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥, –æ—á–∏—â–∞—è –¥–∞–Ω–Ω—ã–µ."""
    context.user_data.clear()
    await update.message.reply_text(
        "–•–æ—Ä–æ—à–æ, –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–∏—Ç–µ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start. –Ø –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏! üòΩ"
    )
    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞."""
    help_text = (
        "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòº\n\n"
        "‚û°Ô∏è *–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å* ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.\n"
        "‚û°Ô∏è *–ü—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é* ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
        "–Ø —É–º–µ—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Ñ–æ—Ç–æ —á–µ–∫–æ–≤ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, —á—Ç–æ–±—ã –≤–∞–º –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –≤–≤–æ–¥–∏—Ç—å –≤—Å—ë –≤—Ä—É—á–Ω—É—é."
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ ---

async def handle_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ."""
    query = update.callback_query
    await query.answer()
    context.user_data['type'] = query.data

    await query.edit_message_text(
        text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, *–ú—É—Ä–∑–∏–∫*) –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.",
        parse_mode='Markdown'
    )
    return STATE_AWAITING_PET


async def handle_pet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –∏ –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ."""
    pet_name = update.message.text.strip().capitalize()
    context.user_data['pet_name'] = pet_name

    await update.message.reply_text(
        f"–ó–∞–ø–∏—Å–∞–ª! –í–µ–¥—ë–º —É—á—ë—Ç –¥–ª—è *{pet_name}*.\n"
        "–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏. üì∏\n"
        "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤—Å—ë —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–∞–º!",
        parse_mode='Markdown'
    )
    return STATE_AWAITING_PHOTO


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ, –∑–∞–ø—É—Å–∫–∞–µ—Ç OCR –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö."""
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ! üßê –î–∞–π—Ç–µ –º–Ω–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥, —è –µ–≥–æ –∏–∑—É—á—É...")

    try:
        photo_file = await update.message.photo[-1].get_file()
        image_bytes = await photo_file.download_as_bytearray()
        recognized_text = await recognize_text(bytes(image_bytes))

        if not recognized_text or recognized_text.startswith("–û—à–∏–±–∫–∞"):
            logger.warning("OCR –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.", extra={'ocr_result': recognized_text})
            await update.message.reply_text(
                "–û–π, –Ω–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ. üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ –ø–æ—á—ë—Ç—á–µ –∏–ª–∏ –ø—Ä–∏ –¥—Ä—É–≥–æ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏."
            )
            return STATE_AWAITING_PHOTO

        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤): {recognized_text[:300]}...")

        ud = context.user_data
        transaction_type = ud.get('type')
        ud['date'] = parse_date(recognized_text)
        ud['amount'] = parse_amount(recognized_text, transaction_type)
        ud['author'] = parse_author(recognized_text, transaction_type)

        if transaction_type == 'income':
            ud['bank'] = parse_bank(recognized_text)
        else:  # expense
            ud['procedure'] = parse_procedure(recognized_text)

        await _show_summary(update, context, "–ì–æ—Ç–æ–≤–æ! ‚ú® –í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å:")
        return STATE_CONFIRMATION

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_photo: {e}", exc_info=True)
        await update.message.reply_text(
            "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. üòµ‚Äçüí´ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –µ—â—ë —Ä–∞–∑."
        )
        return STATE_AWAITING_PHOTO


async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', '–ò—Å–ø—Ä–∞–≤–∏—Ç—å', '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–û—Ç–º–µ–Ω–∞'."""
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == 'save':
        await query.edit_message_text("–ú–∏–Ω—É—Ç–∫—É, —Å–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É... ‚è≥")
        try:
            sheet_link = write_transaction(context.user_data)
            if sheet_link:
                pet_name = context.user_data.get('pet_name', '—Ö–≤–æ—Å—Ç–∏–∫')
                success_message = (
                    f"‚úÖ *–£—Å–ø–µ—Ö!* –ó–∞–ø–∏—Å—å –¥–ª—è *{pet_name}* –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.\n\n"
                    f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ]({sheet_link})"
                )
                await query.edit_message_text(
                    success_message,
                    parse_mode='Markdown',
                    disable_web_page_preview=True,
                    reply_markup=get_restart_keyboard()
                )
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞, –Ω–µ –∑–∞–≤–µ—Ä—à–∞—è –¥–∏–∞–ª–æ–≥
                return STATE_DONE
            else:
                error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ç–∞–±–ª–∏—Ü–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
                await query.edit_message_text(error_text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}", exc_info=True)
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            await query.edit_message_text(error_text)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        context.user_data.clear()
        return ConversationHandler.END

    elif action == 'edit':
        summary_text = build_summary_text(context.user_data)
        await query.edit_message_text(
            f"–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –Ω–∏–∂–µ:\n\n{summary_text}",
            reply_markup=get_editing_keyboard(context.user_data), parse_mode='Markdown'
        )
        return STATE_EDITING_CHOICE

    elif action == 'add_comment':
        await query.edit_message_text("–ö–æ–Ω–µ—á–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:")
        return STATE_AWAITING_COMMENT

    elif action == 'cancel':
        context.user_data.clear()
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
        return ConversationHandler.END

    return STATE_CONFIRMATION


async def handle_editing_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()

    if query.data == 'edit_back':
        await _show_summary(update, context, "–•–æ—Ä–æ—à–æ, –≤–µ—Ä–Ω—ë–º—Å—è –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ. –í—Å—ë –≤–µ—Ä–Ω–æ?")
        return STATE_CONFIRMATION

    field_to_edit = query.data.replace('edit_', '')
    context.user_data['field_to_edit'] = field_to_edit

    field_labels = {
        'pet_name': '–∏–º—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ', 'date': '–¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)',
        'amount': '—Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123.45)', 'bank': '–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞',
        'author': '–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞', 'procedure': '–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ'
    }
    prompt_text = f"–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è *'{field_labels.get(field_to_edit, field_to_edit)}'*:"
    await query.edit_message_text(prompt_text, parse_mode='Markdown')
    return STATE_AWAITING_EDIT_VALUE


async def handle_edit_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –µ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é."""
    field = context.user_data.get('field_to_edit')
    if not field:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ `field_to_edit` –≤ user_data.")
        await _show_summary(update, context, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ.")
        return STATE_CONFIRMATION

    new_value = update.message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if field == 'amount':
        try:
            # –û—á–∏—â–∞–µ–º –æ—Ç –≤—Å–µ–≥–æ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç–æ–π, –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ float
            cleaned_value = re.sub(r'[^\d,.]', '', new_value).replace(',', '.')
            context.user_data[field] = float(cleaned_value)
        except (ValueError, TypeError):
            await update.message.reply_text(
                "–•–º, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—É–º–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `1500.50`.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                parse_mode='Markdown'
            )
            return STATE_AWAITING_EDIT_VALUE

    elif field == 'date':
        if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', new_value):
            await update.message.reply_text(
                "–û–π, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—ë –∫–∞–∫ `–î–î.–ú–ú.–ì–ì–ì–ì`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `08.10.2025`.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                parse_mode='Markdown'
            )
            return STATE_AWAITING_EDIT_VALUE
        context.user_data[field] = new_value
    else:
        context.user_data[field] = new_value

    context.user_data.pop('field_to_edit', None)
    await _show_summary(update, context, "–ì–æ—Ç–æ–≤–æ, –ø–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –î–∞–≤–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑ –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏–º:")
    return STATE_CONFIRMATION


async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    context.user_data['comment'] = update.message.text.strip()
    await _show_summary(update, context, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω! ‚ú® –¢–µ–ø–µ—Ä—å –≤—Å—ë –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ?")
    return STATE_CONFIRMATION


# --- –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ ConversationHandler ---

def setup_handlers():
    """–°–æ–∑–¥–∞—ë—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç ConversationHandler –¥–ª—è –≤—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            STATE_AWAITING_TYPE: [CallbackQueryHandler(handle_type, pattern='^(income|expense)$')],
            STATE_AWAITING_PET: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_pet)],
            STATE_AWAITING_PHOTO: [MessageHandler(filters.PHOTO, handle_photo)],
            STATE_CONFIRMATION: [CallbackQueryHandler(handle_confirmation, pattern='^(save|edit|add_comment|cancel)$')],
            STATE_EDITING_CHOICE: [CallbackQueryHandler(handle_editing_choice)],
            STATE_AWAITING_EDIT_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_value)],
            STATE_AWAITING_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment)],
            STATE_DONE: [CallbackQueryHandler(start, pattern='^restart_flow$')]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CommandHandler('start', start), # –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ
        ]
    )

    help_handler = CommandHandler('help', help_command)

    return conv_handler, help_handler
