import re
import logging
from telegram import Update
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, filters,
    ConversationHandler, CallbackQueryHandler
)

from app.services.vision_ocr import recognize_text
from app.services.data_parser import parse_date, parse_amount, parse_bank, parse_author
from app.services.sheets_client import write_transaction
from app.bot.keyboards import get_transaction_type_keyboard, get_confirmation_keyboard, get_editing_keyboard

logger = logging.getLogger(__name__)

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ---
(
    AWAITING_TYPE, AWAITING_PET, AWAITING_PHOTO,
    CONFIRMATION, EDITING, AWAITING_EDIT_VALUE,
    AWAITING_COMMENT
) = range(7)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def build_summary_text(data: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç-—Å–≤–æ–¥–∫—É –ø–æ —Ç–µ–∫—É—â–∏–º –¥–∞–Ω–Ω—ã–º."""
    ud = data
    type_str = '‚úÖ –ü—Ä–∏—Ö–æ–¥' if ud.get('type') == 'income' else '‚ùå –†–∞—Å—Ö–æ–¥'
    
    summary_parts = [
        f"–¢–∏–ø: *{type_str}*",
        f"–ü–∏—Ç–æ–º–µ—Ü: *{ud.get('pet_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')}*",
        f"–î–∞—Ç–∞: *{ud.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}*",
        f"–°—É–º–º–∞: *{ud.get('amount', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}*",
        f"–ê–≤—Ç–æ—Ä: *{ud.get('author', '–Ω–µ —É–∫–∞–∑–∞–Ω')}*",
    ]
    if ud.get('type') == 'income':
        summary_parts.append(f"–ë–∞–Ω–∫: *{ud.get('bank', '–Ω–µ —É–∫–∞–∑–∞–Ω')}*")

    return "\n".join(summary_parts)

async def _end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str) -> int:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(text=message)
        else:
            await update.message.reply_text(text=message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
    
    context.user_data.clear()
    return ConversationHandler.END

async def _safe_edit_message(update: Update, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞."""
    context.user_data.clear()
    text = "–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–Ω–µ–º –∑–∞–ø–∏—Å—å. –≠—Ç–æ –ø—Ä–∏—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥?"
    
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=get_transaction_type_keyboard())
        else:
            await update.message.reply_text(text, reply_markup=get_transaction_type_keyboard())
        return AWAITING_TYPE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await _end_conversation(update, context, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
        return ConversationHandler.END

async def handle_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'action_cancel':
        return await _end_conversation(update, context, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        
    try:
        context.user_data['type'] = query.data.split('_')[1] # 'income' or 'expense'
        await query.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ (–ø—Ä–æ–µ–∫—Ç–∞):")
        return AWAITING_PET
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_type: {e}")
        await _end_conversation(update, context, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
        return ConversationHandler.END

async def handle_pet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞."""
    try:
        context.user_data['pet_name'] = update.message.text.strip()
        if not context.user_data['pet_name']:
            await update.message.reply_text("–ò–º—è –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
            return AWAITING_PET
            
        await update.message.reply_text("–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return AWAITING_PHOTO
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_pet: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return AWAITING_PET

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    try:
        await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª, —Ä–∞—Å–ø–æ–∑–Ω–∞—é... üßê")
        
        photo_file = await update.message.photo[-1].get_file()
        image_bytes = await photo_file.download_as_bytearray()
        recognized_text = await recognize_text(image_bytes)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        if recognized_text is None or recognized_text.startswith(('–û—à–∏–±–∫–∞', '–ö–õ–ò–ï–ù–¢', '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')):
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. "
            if recognized_text:
                error_msg += f"–ü—Ä–∏—á–∏–Ω–∞: {recognized_text}"
            else:
                error_msg += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
            
            await update.message.reply_text(error_msg)
            return AWAITING_PHOTO

        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {recognized_text[:200]}...")

        # –ü–∞—Ä—Å–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data['date'] = parse_date(recognized_text)
        context.user_data['amount'] = parse_amount(recognized_text)
        context.user_data['bank'] = parse_bank(recognized_text)
        context.user_data['author'] = parse_author(recognized_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not context.user_data.get('amount'):
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á—å —Å—É–º–º—É. "
                "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—ë –≤—Ä—É—á–Ω—É—é –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ."
            )

        summary_text = build_summary_text(context.user_data)
        await update.message.reply_text(
            f"–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å:\n\n{summary_text}",
            reply_markup=get_confirmation_keyboard(), 
            parse_mode='Markdown'
        )
        return CONFIRMATION
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_photo: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑.")
        return AWAITING_PHOTO

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()

    action = query.data
    try:
        if action == 'confirm_save':
            await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ /skip, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.")
            return AWAITING_COMMENT
        elif action == 'confirm_edit':
            await query.edit_message_text(
                "–ö–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?", 
                reply_markup=get_editing_keyboard(context.user_data)
            )
            return EDITING
        elif action == 'action_restart':
            return await start(update, context)
        elif action == 'action_cancel':
            return await _end_conversation(update, context, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return CONFIRMATION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirmation: {e}")
        await _end_conversation(update, context, "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
        return ConversationHandler.END

async def handle_edit_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == 'edit_back':
            summary_text = build_summary_text(context.user_data)
            await query.edit_message_text(
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n{summary_text}",
                reply_markup=get_confirmation_keyboard(),
                parse_mode='Markdown'
            )
            return CONFIRMATION

        field_to_edit = query.data.split('_', 1)[1]
        context.user_data['field_to_edit'] = field_to_edit
        
        field_map = {
            'pet_name': '–∏–º—è –ø–∏—Ç–æ–º—Ü–∞', 
            'date': '–¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)',
            'amount': '—Å—É–º–º—É (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50)', 
            'bank': '–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞', 
            'author': '–∞–≤—Ç–æ—Ä–∞'
        }
        
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_map.get(field_to_edit, '–ø–æ–ª–µ')}':"
        )
        return AWAITING_EDIT_VALUE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_edit_selection: {e}")
        await _safe_edit_message(update, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return EDITING

async def handle_new_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è."""
    try:
        field = context.user_data.pop('field_to_edit', None)
        if not field: 
            return CONFIRMATION
        
        new_value = update.message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
        if field == 'amount':
            try:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É
                normalized = new_value.replace(' ', '').replace(',', '.')
                new_value = float(normalized)
                if new_value <= 0:
                    await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
                    context.user_data['field_to_edit'] = field
                    return AWAITING_EDIT_VALUE
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50):")
                context.user_data['field_to_edit'] = field
                return AWAITING_EDIT_VALUE
                
        elif field == 'date':
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
            if not re.match(r'\d{2}\.\d{2}\.\d{4}', new_value):
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
                context.user_data['field_to_edit'] = field
                return AWAITING_EDIT_VALUE
        
        context.user_data[field] = new_value
        summary_text = build_summary_text(context.user_data)
        
        await update.message.reply_text(
            f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â–µ —Ä–∞–∑:\n\n{summary_text}",
            reply_markup=get_confirmation_keyboard(), 
            parse_mode='Markdown'
        )
        return CONFIRMATION
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_new_value: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return AWAITING_EDIT_VALUE
    
async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE, skip: bool = False) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ."""
    message_to_reply = update.message
    
    try:
        if skip:
            context.user_data['comment'] = ''
            await message_to_reply.reply_text("–°–æ—Ö—Ä–∞–Ω—è—é –∑–∞–ø–∏—Å—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...")
        else:
            context.user_data['comment'] = message_to_reply.text
            await message_to_reply.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏–Ω—è—Ç. –°–æ—Ö—Ä–∞–Ω—è—é –∑–∞–ø–∏—Å—å...")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['pet_name', 'amount', 'date']
        missing_fields = [field for field in required_fields if not context.user_data.get(field)]
        
        if missing_fields:
            error_msg = f"–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start"
            await message_to_reply.reply_text(error_msg)
            return await _end_conversation(update, context, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        link = write_transaction(context.user_data['pet_name'], context.user_data)
        
        if link:
            final_message = f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: [–æ—Ç–∫—Ä—ã—Ç—å]({link})"
        else:
            final_message = "‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã."
            
        await message_to_reply.reply_text(
            final_message, 
            parse_mode='Markdown', 
            disable_web_page_preview=True
        )
        return await _end_conversation(update, context, "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_comment: {e}")
        await message_to_reply.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
        return await _end_conversation(update, context, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
async def get_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await handle_comment(update, context, skip=False)
    
async def skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await handle_comment(update, context, skip=True)
    
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
    help_text = """
üìñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:*

1. */start* - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
2. */help* - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É  
3. */cancel* - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

*–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏:*
- –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–∏—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
- –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—è
- –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ Google —Ç–∞–±–ª–∏—Ü—É

–î–ª—è –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã."""
    return await _end_conversation(update, context, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è main.py
start_handler = CommandHandler("start", start)
help_handler = CommandHandler("help", help_command)
cancel_handler = CommandHandler("cancel", cancel)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        AWAITING_TYPE: [CallbackQueryHandler(handle_type)],
        AWAITING_PET: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_pet)],
        AWAITING_PHOTO: [MessageHandler(filters.PHOTO, handle_photo)],
        CONFIRMATION: [CallbackQueryHandler(handle_confirmation)],
        EDITING: [CallbackQueryHandler(handle_edit_selection)],
        AWAITING_EDIT_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_value)],
        AWAITING_COMMENT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, get_comment),
            CommandHandler("skip", skip_comment),
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)