# app/bot/handlers.py

import re
import logging
from telegram import Update
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, filters,
    ConversationHandler, CallbackQueryHandler
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from app.services.vision_ocr import recognize_text
from app.services.data_parser import parse_date, parse_amount, parse_bank, parse_author
from app.services.sheets_client import write_transaction
from app.bot.keyboards import get_transaction_type_keyboard, get_confirmation_keyboard, get_editing_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤ –≤–∏–¥–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
(
    AWAITING_TYPE, AWAITING_PET, AWAITING_PHOTO,
    CONFIRMATION, EDITING, AWAITING_EDIT_VALUE,
    AWAITING_COMMENT
) = range(7)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def build_summary_text(data: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç-—Å–≤–æ–¥–∫—É –ø–æ —Ç–µ–∫—É—â–∏–º –¥–∞–Ω–Ω—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
    ud = data
    type_str = '‚úÖ –ü—Ä–∏—Ö–æ–¥ (–¥–æ–Ω–∞—Ç)' if ud.get('type') == 'income' else '‚ùå –†–∞—Å—Ö–æ–¥ (–ø–æ–∫—É–ø–∫–∞)'

    # –°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
    summary_parts = [
        f"–¢–∏–ø: *{type_str}*",
        f"–ü–∏—Ç–æ–º–µ—Ü/–ü—Ä–æ–µ–∫—Ç: *{ud.get('pet_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')}*",
        f"–î–∞—Ç–∞: *{ud.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}*",
        f"–°—É–º–º–∞: *{ud.get('amount', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}*",
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å: –±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
        f"–ê–≤—Ç–æ—Ä/–ò—Å—Ç–æ—á–Ω–∏–∫: *{ud.get('author', '–Ω–µ —É–∫–∞–∑–∞–Ω')}*",
    ]
    if ud.get('type') == 'income':
        summary_parts.append(f"–ë–∞–Ω–∫: *{ud.get('bank', '–Ω–µ —É–∫–∞–∑–∞–Ω')}*")

    return "\n".join(summary_parts)

async def _end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str) -> int:
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏—Ö —É—Ç–µ—á–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥.
    """
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(text=message)
        else:
            await update.message.reply_text(text=message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ: {e}")

    context.user_data.clear()
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –æ—á–∏—â–∞—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    context.user_data.clear()
    text = "–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–Ω–µ–º –∑–∞–ø–∏—Å—å. –≠—Ç–æ –ø—Ä–∏—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥?"

    reply_markup = get_transaction_type_keyboard()
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

    return AWAITING_TYPE

async def handle_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–∏—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)."""
    query = update.callback_query
    await query.answer()

    if query.data == 'action_cancel':
        return await _end_conversation(update, context, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    context.user_data['type'] = query.data.split('_')[1]
    await query.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    return AWAITING_PET

async def handle_pet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è –ø–∏—Ç–æ–º—Ü–∞/–ø—Ä–æ–µ–∫—Ç–∞."""
    pet_name = update.message.text.strip()
    if not pet_name:
        await update.message.reply_text("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞:")
        return AWAITING_PET

    context.user_data['pet_name'] = pet_name
    await update.message.reply_text("–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏.")
    return AWAITING_PHOTO

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ, –∑–∞–ø—É—Å–∫–∞–µ—Ç OCR –∏ –ø–∞—Ä—Å–∏–Ω–≥, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."""
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª, —Ä–∞—Å–ø–æ–∑–Ω–∞—é... üßê –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

    try:
        photo_file = await update.message.photo[-1].get_file()
        image_bytes = await photo_file.download_as_bytearray()
        
        recognized_text = await recognize_text(bytes(image_bytes))

        if not recognized_text or recognized_text.startswith("–û—à–∏–±–∫–∞"):
            error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü—Ä–∏—á–∏–Ω–∞: {recognized_text}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ."
            await update.message.reply_text(error_msg)
            return AWAITING_PHOTO

        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {recognized_text[:300]}...")

        context.user_data['date'] = parse_date(recognized_text)
        context.user_data['amount'] = parse_amount(recognized_text)
        context.user_data['author'] = parse_author(recognized_text)
        
        if context.user_data.get('type') == 'income':
            context.user_data['bank'] = parse_bank(recognized_text)

        if not context.user_data.get('amount'):
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á—å —Å—É–º–º—É. –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—ë –≤—Ä—É—á–Ω—É—é –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ."
            )

        summary_text = build_summary_text(context.user_data)
        await update.message.reply_text(
            f"–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å:\n\n{summary_text}",
            reply_markup=get_confirmation_keyboard(),
            parse_mode='Markdown'
        )
        return CONFIRMATION

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_photo: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return AWAITING_PHOTO

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == 'confirm_save':
        # –î–ª—è —Ä–∞—Å—Ö–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - —ç—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –æ–Ω –≤–∞–∂–µ–Ω. –î–ª—è –ø—Ä–∏—Ö–æ–¥–∞ - –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω.
        comment_prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–æ—Ä–º' –∏–ª–∏ '–ü—Ä–∏–≤–∏–≤–∫–∞')." if context.user_data.get('type') == 'expense' else "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –¥–æ–Ω–∞—Ç–µ—Ä–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)."
        await query.edit_message_text(f"{comment_prompt}\n–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /skip.")
        return AWAITING_COMMENT

    elif action == 'confirm_edit':
        await query.edit_message_text(
            "–ö–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?",
            reply_markup=get_editing_keyboard(context.user_data)
        )
        return EDITING

    elif action == 'action_restart':
        return await start(update, context)

    elif action == 'action_cancel':
        return await _end_conversation(update, context, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    return CONFIRMATION

async def handle_edit_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()

    if query.data == 'edit_back':
        summary_text = build_summary_text(context.user_data)
        await query.edit_message_text(
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑:\n\n{summary_text}",
            reply_markup=get_confirmation_keyboard(),
            parse_mode='Markdown'
        )
        return CONFIRMATION

    field_to_edit = query.data.split('_', 1)[1]
    context.user_data['field_to_edit'] = field_to_edit

    field_map = {
        'pet_name': '–∏–º—è –ø–∏—Ç–æ–º—Ü–∞',
        'date': '–¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì)',
        'amount': '—Å—É–º–º—É (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50)',
        'bank': '–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞',
        'author': '–∞–≤—Ç–æ—Ä–∞/–∏—Å—Ç–æ—á–Ω–∏–∫'
    }

    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_map.get(field_to_edit, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ')}':")
    return AWAITING_EDIT_VALUE

async def handle_new_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –µ–≥–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    field = context.user_data.pop('field_to_edit', None)
    if not field:
        summary_text = build_summary_text(context.user_data)
        await update.message.reply_text(
            f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–µ—Ä–Ω–µ–º—Å—è –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ:\n\n{summary_text}",
            reply_markup=get_confirmation_keyboard(), parse_mode='Markdown'
        )
        return CONFIRMATION

    new_value = update.message.text.strip()

    if field == 'amount':
        try:
            # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Å—É–º–º—ã
            normalized_value = re.sub(r'[^\d,.]', '', new_value).replace(',', '.')
            parsed_amount = float(normalized_value)
            if parsed_amount <= 0:
                await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                context.user_data['field_to_edit'] = field
                return AWAITING_EDIT_VALUE
            new_value = parsed_amount
        except (ValueError, TypeError):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50):")
            context.user_data['field_to_edit'] = field
            return AWAITING_EDIT_VALUE

    elif field == 'date':
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞, –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –≤ –ø–∞—Ä—Å–µ—Ä–µ
        if not re.match(r'^\d{2}[./-]\d{2}[./-]\d{2,4}$', new_value):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            context.user_data['field_to_edit'] = field
            return AWAITING_EDIT_VALUE
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ
        new_value = new_value.replace('/', '.').replace('-', '.')


    context.user_data[field] = new_value
    summary_text = build_summary_text(context.user_data)

    await update.message.reply_text(
        f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â–µ —Ä–∞–∑:\n\n{summary_text}",
        reply_markup=get_confirmation_keyboard(),
        parse_mode='Markdown'
    )
    return CONFIRMATION

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    context.user_data['comment'] = update.message.text.strip()
    await update.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏–Ω—è—Ç. –°–æ—Ö—Ä–∞–Ω—è—é –∑–∞–ø–∏—Å—å...")
    return await save_data(update, context)

async def skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    context.user_data['comment'] = ''
    await update.message.reply_text("–°–æ—Ö—Ä–∞–Ω—è—é –∑–∞–ø–∏—Å—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...")
    return await save_data(update, context)

async def save_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –≤–∞–ª–∏–¥–∞—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞."""
    try:
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['pet_name', 'amount', 'date']
        missing_fields = [field for field in required_fields if not context.user_data.get(field)]

        if missing_fields:
            missing_str = ', '.join(missing_fields)
            error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_str}. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start"
            return await _end_conversation(update, context, error_msg)

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ Google Sheets: {context.user_data}")
        link = write_transaction(context.user_data)

        if link:
            final_message = f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ]({link})"
        else:
            final_message = "‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."

        target = update.callback_query.message if update.callback_query else update.message
        await target.reply_text(
            final_message,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ save_data: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")

    context.user_data.clear()
    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞."""
    help_text = (
        "üìñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:*\n\n"
        "1. `/start` - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.\n"
        "2. `/help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É.\n"
        "3. `/cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
        "*–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏:*\n"
        "- –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–∏—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥).\n"
        "- –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞.\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç.\n"
        "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
        "- –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—è.\n"
        "- –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /skip).\n"
        "- –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ Google-—Ç–∞–±–ª–∏—Ü—É."
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel, –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    return await _end_conversation(update, context, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        AWAITING_TYPE: [CallbackQueryHandler(handle_type, pattern='^type_|^action_cancel$')],
        AWAITING_PET: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_pet)],
        AWAITING_PHOTO: [MessageHandler(filters.PHOTO, handle_photo)],
        CONFIRMATION: [CallbackQueryHandler(handle_confirmation, pattern='^confirm_|^action_')],
        EDITING: [CallbackQueryHandler(handle_edit_selection, pattern='^edit_')],
        AWAITING_EDIT_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_value)],
        AWAITING_COMMENT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment),
            CommandHandler("skip", skip_comment),
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True
)

help_handler = CommandHandler("help", help_command)