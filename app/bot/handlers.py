import logging
import re
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, filters,
    ConversationHandler, CallbackQueryHandler
)

from app.bot.keyboards import get_transaction_type_keyboard, get_confirmation_keyboard, get_editing_keyboard, get_restart_keyboard
from app.services.vision_ocr import recognize_text
from app.services.data_parser import parse_transaction_data
from app.services.sheets_client import write_transaction
from config.settings import settings

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

(STATE_AWAITING_TYPE, STATE_AWAITING_PET, STATE_AWAITING_PHOTO, STATE_CONFIRMATION,
 STATE_EDITING_CHOICE, STATE_AWAITING_EDIT_VALUE, STATE_AWAITING_COMMENT, STATE_DONE) = range(8)

def build_summary_text(data: dict) -> str:
    ud = data
    if ud.get('type') == 'transaction':
        summary_parts = [
            "–¢–∏–ø: üí∏ *–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏*",
            f"–ü–æ–¥–æ–ø–µ—á–Ω—ã–π: *{ud.get('pet_name', '...')}*",
            f"–î–∞—Ç–∞: *{ud.get('date', '...')}* (—Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è)",
            f"–ë–∞–Ω–∫: *{ud.get('bank', '...')}*",
            "\n*–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*"
        ]
        transactions = ud.get('transactions', [])
        if not transactions:
            summary_parts.append("_–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏._")
        else:
            summary_parts.extend([f"- *{tx.get('author')}*: {tx.get('amount')} —Ä—É–±." for tx in transactions])
    else:
        type_str = 'üìà *–î–æ—Ö–æ–¥*' if ud.get('type') == 'income' else 'üõçÔ∏è *–†–∞—Å—Ö–æ–¥*'
        summary_parts = [f"–¢–∏–ø: {type_str}", f"–ü–æ–¥–æ–ø–µ—á–Ω—ã–π: *{ud.get('pet_name', '...')}*"]
        if ud.get('type') == 'income':
            summary_parts.extend([
                f"–î–∞—Ç–∞: *{ud.get('date', '...')}*", f"–°—É–º–º–∞: *{ud.get('amount', '...')} —Ä—É–±*.",
                f"–ë–∞–Ω–∫: *{ud.get('bank', '...')}*", f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: *{ud.get('author', '...')}*"
            ])
        else:
            summary_parts.extend([
                f"–î–∞—Ç–∞: *{ud.get('date', '...')}*", f"–°—É–º–º–∞: *{ud.get('amount', '...')} —Ä—É–±*.",
                f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: *{ud.get('procedure', '...')}*", f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: *{ud.get('author', '...')}*"
            ])
    if ud.get('comment'):
        summary_parts.append(f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: _{ud.get('comment')}_")
    return "\n".join(summary_parts)

async def _show_summary(update: Update, context: ContextTypes.DEFAULT_TYPE, text_prefix: str):
    full_text = f"{text_prefix}\n\n{build_summary_text(context.user_data)}"
    keyboard = get_confirmation_keyboard()
    if update.callback_query:
        await update.callback_query.edit_message_text(full_text, reply_markup=keyboard, parse_mode='Markdown')
    else:
        await update.message.reply_text(full_text, reply_markup=keyboard, parse_mode='Markdown')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    welcome_text = (f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üêæ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ —É—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n\n"
                    "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å?")
    keyboard = get_transaction_type_keyboard()
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(welcome_text, reply_markup=keyboard, parse_mode='Markdown', disable_web_page_preview=True)
    else:
        await update.message.reply_text(welcome_text, reply_markup=keyboard, parse_mode='Markdown', disable_web_page_preview=True)
    return STATE_AWAITING_TYPE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
    return ConversationHandler.END

async def handle_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['type'] = query.data
    await query.edit_message_text(text="–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, *–ú—É—Ä–∑–∏–∫*).", parse_mode='Markdown')
    return STATE_AWAITING_PET

async def handle_pet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    pet_name = update.message.text.strip().capitalize()
    context.user_data['pet_name'] = pet_name
    await update.message.reply_text(f"–£—á—ë—Ç –¥–ª—è *{pet_name}*. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç.", parse_mode='Markdown')
    return STATE_AWAITING_PHOTO

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ! üßê –ò–∑—É—á–∞—é...")
    try:
        photo_file = await update.message.photo[-1].get_file()
        image_bytes = await photo_file.download_as_bytearray()
        recognized_text = await recognize_text(bytes(image_bytes))

        if not recognized_text or recognized_text.startswith("–û—à–∏–±–∫–∞"):
            await update.message.reply_text("–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ –ø–æ—á—ë—Ç—á–µ.")
            return STATE_AWAITING_PHOTO

        ud = context.user_data
        parsed_data = parse_transaction_data(recognized_text, ud.get('type'))
        ud.update(parsed_data)
        if ud.get('type') == 'transaction':
            ud['date'] = datetime.now().strftime("%d.%m.%Y")
        
        await _show_summary(update, context, "–ì–æ—Ç–æ–≤–æ! ‚ú® –í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å:")
        return STATE_CONFIRMATION
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_photo: {e}", exc_info=True)
        await update.message.reply_text("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑.")
        return STATE_AWAITING_PHOTO

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == 'save':
        await query.edit_message_text("–ú–∏–Ω—É—Ç–∫—É, —Å–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ... ‚è≥")
        ud = context.user_data
        sheet_link = None
        saved_count = 0
        
        if ud.get('type') == 'transaction':
            transactions_to_save = ud.get('transactions', [])
            base_data = {'pet_name': ud.get('pet_name'), 'date': ud.get('date'), 'bank': ud.get('bank'), 'comment': ud.get('comment'), 'type': 'income'}
            for tx in transactions_to_save:
                data_to_write = {**base_data, **tx}
                if result_link := write_transaction(data_to_write):
                    sheet_link = result_link
                    saved_count += 1
        else:
            if sheet_link := write_transaction(ud):
                saved_count = 1

        if saved_count > 0:
            success_message = f"‚úÖ *–£—Å–ø–µ—Ö!* –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: *{saved_count}* –¥–ª—è *{ud.get('pet_name', '—Ö–≤–æ—Å—Ç–∏–∫–∞')}*.\n\nüîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ]({sheet_link})"
            await query.edit_message_text(success_message, parse_mode='Markdown', disable_web_page_preview=True, reply_markup=get_restart_keyboard())
            return STATE_DONE
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã.", reply_markup=get_restart_keyboard())
            return STATE_DONE

    elif action == 'edit':
        await query.edit_message_text(f"–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å?\n\n{build_summary_text(context.user_data)}",
                                      reply_markup=get_editing_keyboard(context.user_data), parse_mode='Markdown')
        return STATE_EDITING_CHOICE
    elif action == 'add_comment':
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:")
        return STATE_AWAITING_COMMENT
    elif action == 'cancel':
        context.user_data.clear()
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
        return ConversationHandler.END
    return STATE_CONFIRMATION

async def handle_editing_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == 'edit_back':
        await _show_summary(update, context, "–•–æ—Ä–æ—à–æ, –≤–µ—Ä–Ω—ë–º—Å—è –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ. –í—Å—ë –≤–µ—Ä–Ω–æ?")
        return STATE_CONFIRMATION
    field_to_edit = query.data.replace('edit_', '')
    context.user_data['field_to_edit'] = field_to_edit
    field_labels = {'pet_name': '–∏–º—è', 'date': '–¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì)', 'amount': '—Å—É–º–º—É', 'bank': '–±–∞–Ω–∫', 'author': '–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è', 'procedure': '–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ'}
    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è *'{field_labels.get(field_to_edit, field_to_edit)}'*:", parse_mode='Markdown')
    return STATE_AWAITING_EDIT_VALUE

async def handle_edit_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    field = context.user_data.get('field_to_edit')
    new_value = update.message.text.strip()
    if field == 'amount':
        try: context.user_data[field] = float(re.sub(r'[^\d,.]', '', new_value).replace(',', '.'))
        except (ValueError, TypeError):
            await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—É–º–º—É. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1500.50`).", parse_mode='Markdown')
            return STATE_AWAITING_EDIT_VALUE
    elif field == 'date' and not re.match(r'^\d{2}\.\d{2}\.\d{4}$', new_value):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ `–î–î.–ú–ú.–ì–ì–ì–ì`.", parse_mode='Markdown')
        return STATE_AWAITING_EDIT_VALUE
    else: context.user_data[field] = new_value
    await _show_summary(update, context, "–ì–æ—Ç–æ–≤–æ, –ø–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â—ë —Ä–∞–∑:")
    return STATE_CONFIRMATION

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['comment'] = update.message.text.strip()
    await _show_summary(update, context, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω! ‚ú® –¢–µ–ø–µ—Ä—å –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?")
    return STATE_CONFIRMATION

def setup_handlers():
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            STATE_AWAITING_TYPE: [CallbackQueryHandler(handle_type, pattern='^(income|expense|transaction)$')],
            STATE_AWAITING_PET: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_pet)],
            STATE_AWAITING_PHOTO: [MessageHandler(filters.PHOTO, handle_photo)],
            STATE_CONFIRMATION: [CallbackQueryHandler(handle_confirmation, pattern='^(save|edit|add_comment|cancel)$')],
            STATE_EDITING_CHOICE: [CallbackQueryHandler(handle_editing_choice)],
            STATE_AWAITING_EDIT_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_value)],
            STATE_AWAITING_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment)],
            STATE_DONE: [CallbackQueryHandler(start, pattern='^restart_flow$')]
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('start', start)]
    )
    return conv_handler, CommandHandler('help', lambda u, c: u.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."))