import gspread
import os
from gspread.exceptions import APIError, WorksheetNotFound
import logging

logger = logging.getLogger(__name__)

CREDENTIALS_FILE = "credentials.json"
SPREADSHEET_NAME = "HvostatyeSosediBot_DB"
TEMPLATE_SHEET_NAME = "–®–∞–±–ª–æ–Ω"

INCOME_COLS = {
    "start": "A", "end": "E", "check_col_index": 1,
}
EXPENSE_COLS = {
    "start": "G", "end": "K", "check_col_index": 7,
}

def get_spreadsheet_link(spreadsheet: gspread.Spreadsheet, worksheet: gspread.Worksheet) -> str:
    return f"https://docs.google.com/spreadsheets/d/{spreadsheet.id}/edit#gid={worksheet.id}"

def _create_fallback_worksheet(spreadsheet: gspread.Spreadsheet, sheet_name: str) -> gspread.Worksheet | None:
    logger.warning(f"–®–∞–±–ª–æ–Ω '{TEMPLATE_SHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –ª–∏—Å—Ç –¥–ª—è '{sheet_name}'.")
    try:
        worksheet = spreadsheet.add_worksheet(title=sheet_name, rows="300", cols="20")
        
        worksheet.update('F1', sheet_name)
        worksheet.update('A2', '–ü—Ä–∏—Ö–æ–¥')
        worksheet.update('G2', '–†–∞—Å—Ö–æ–¥')
        
        income_headers = ["–î–∞—Ç–∞", "–°—É–º–º–∞", "–ë–∞–Ω–∫", "–ê–≤—Ç–æ—Ä", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
        expense_headers = ["–î–∞—Ç–∞", "–°—É–º–º–∞", "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞", "–ê–≤—Ç–æ—Ä", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
        worksheet.update('A3', [income_headers])
        worksheet.update('G3', [expense_headers])
        
        return worksheet
    except APIError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–∂–µ –±–∞–∑–æ–≤—ã–π –ª–∏—Å—Ç: {e}")
        return None

def _find_or_create_worksheet(spreadsheet: gspread.Spreadsheet, pet_name: str) -> gspread.Worksheet | None:
    try:
        return spreadsheet.worksheet(pet_name)
    except WorksheetNotFound:
        logger.info(f"–õ–∏—Å—Ç –¥–ª—è '{pet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—â–µ–º —à–∞–±–ª–æ–Ω '{TEMPLATE_SHEET_NAME}' –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")

    try:
        template_worksheet = spreadsheet.worksheet(TEMPLATE_SHEET_NAME)
        new_worksheet = template_worksheet.duplicate(new_sheet_name=pet_name)
        new_worksheet.update_cell(1, 6, pet_name)
        
        logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω '{TEMPLATE_SHEET_NAME}' —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –Ω–æ–≤—ã–π –ª–∏—Å—Ç '{pet_name}'.")
        return new_worksheet
    except WorksheetNotFound:
        return _create_fallback_worksheet(spreadsheet, pet_name)
    except APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        return None

def write_transaction(transaction_data: dict) -> str | None:
    if not os.path.exists(CREDENTIALS_FILE):
        logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª {CREDENTIALS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

    try:
        gc = gspread.service_account(filename=CREDENTIALS_FILE)
        spreadsheet = gc.open(SPREADSHEET_NAME)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Google Sheets: {e}", exc_info=True)
        return None

    pet_name = transaction_data.get('pet_name', '').strip().capitalize()
    if not pet_name:
        logger.error("–í –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'pet_name'. –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return None

    worksheet = _find_or_create_worksheet(spreadsheet, pet_name)
    if not worksheet:
        return None

    trans_type = transaction_data.get('type')
    
    if trans_type in ['income', 'transaction']:
        target_cols = INCOME_COLS
        row_data = [
            transaction_data.get('date', ''),
            transaction_data.get('amount', ''),
            transaction_data.get('bank', ''),
            transaction_data.get('author', ''),
            transaction_data.get('comment', '')
        ]
    elif trans_type == 'expense':
        target_cols = EXPENSE_COLS
        row_data = [
            transaction_data.get('date', ''),
            transaction_data.get('amount', ''),
            transaction_data.get('procedure', ''),
            transaction_data.get('author', ''),
            transaction_data.get('comment', '')
        ]
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: '{trans_type}'")
        return None

    try:
        col_values = worksheet.col_values(target_cols["check_col_index"])
        next_row = len(col_values) + 1
        if next_row < 4: next_row = 4
        
        write_range = f'{target_cols["start"]}{next_row}:{target_cols["end"]}{next_row}'
        worksheet.update(write_range, [row_data], value_input_option='USER_ENTERED')
        
        sheet_link = get_spreadsheet_link(spreadsheet, worksheet)
        
        logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ª–∏—Å—Ç '{worksheet.title}', –¥–∏–∞–ø–∞–∑–æ–Ω {write_range}")
        logger.info(f"üìé –°—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏—Å—Ç: {sheet_link}")
        return sheet_link
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ª–∏—Å—Ç '{worksheet.title}': {e}", exc_info=True)
        return None